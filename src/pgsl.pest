//! Grammar file for PGSL, the Postgres Schema Language
pgsl = { SOI ~ NEWLINE* ~ (
	require | role | table | interface | schema | trigger | function | view
)* ~ EOI }

// Require rule
/// Require defines a list of PGSL files that this file needs
require = { ^"require" ~ end_dec ~ (indent ~ path* ~ NEWLINE+?)+ }
path = @{ path_word ~ ("/" ~ path_word)* }
path_word = @{ (!invalid_file_name_chars ~ !COMMENT ~ ANY)+ }
invalid_file_name_chars = {
	"/" | "\\" | "|" | ":" | "*" | "?" | "<" | ">" | "\"" | "'" | NEWLINE
}

// Role rule
/// Role defines a list of PGSL roles
role = {
    ^"role" ~ end_dec
        ~ role_definition+
}
role_definition = {
    indent ~ role_name
        ~ (
            WHITE_SPACE+ ~ ^"with" ~ WHITE_SPACE+
            ~ role_option ~ (WHITE_SPACE* ~ ^"," ~ WHITE_SPACE+ ~ role_option)*?
        )?
        ~ NEWLINE+?
}

// Table rule
/// Defines a table, the name can include a schema path in the form of schema.table
table = {
	^"table" ~ WHITE_SPACE+ ~ (schema_name ~ ".")? ~ table_name ~ end_dec
		~ table_children
}
table_children = _{
	(extends | columns) ~ table_children*
}

// Interface rule
/// Defines an interface
interface = {
	^"interface" ~ WHITE_SPACE+ ~ interface_name ~ end_dec
		~ columns
}

// Extends rule
/// Defines a list of interfaces the table extends. Must appear as child of a table.
extends = {
	indent ~ ^"extends" ~ end_dec
		~ (indent{2} ~ interface_name ~ NEWLINE+?)+
}

// Columns rule
/// Defines the columns of a table or interface
columns = {
	indent ~ ^"columns" ~ end_dec
		~ (indent{2} ~ column ~ NEWLINE+?)+
}

// Column rule
/// Defines a single column
column = {
	column_name ~ WHITE_SPACE+ ~ type_name
	~ (!NEWLINE ~ WHITE_SPACE+ ~ column_attributes)?
		~ (NEWLINE ~ indent{3} ~ WHITE_SPACE* ~ column_comment)*
}
column_attributes = { (!NEWLINE ~ ANY)* }
column_comment = { (!NEWLINE ~ ANY)* }

// Schema rule
/// Defines a schema
schema = {
	^"schema" ~ WHITE_SPACE+ ~ schema_name
	~ ((end_dec ~ grant+) | NEWLINE+)
}

// Grant rule
/// Defines a grant
grant = {
	indent ~ ^"grant" ~ WHITE_SPACE+ ~ privilege
	~ WHITE_SPACE+ ~ ^"to" ~ WHITE_SPACE+
	~ (role_name ~ (WHITE_SPACE* ~ "," ~ WHITE_SPACE* ~ role_name)*)
	~ NEWLINE+
}

// Trigger rule
/// Defines a trigger
trigger = {
	^"trigger" ~ WHITE_SPACE+ ~ trigger_when ~ WHITE_SPACE+
	~ (trigger_event ~ (WHITE_SPACE+ ~ ^"or" ~ WHITE_SPACE+ ~ trigger_event)*)+
	~ WHITE_SPACE+ ~ ^"on" ~ WHITE_SPACE+
	~ (trigger_interface ~ WHITE_SPACE+)?
	~ (schema_name ~ ".")? ~ trigger_name ~ end_dec
		~ declare?
        ~ begin
        ~ end
}

// Function rule
/// Defines a function
function = {
	^"function" ~ WHITE_SPACE+ ~ (schema_name ~ ".")? ~ function_name ~ end_dec
		~ returns?
		~ accept?
		~ declare?
		~ begin
		~ end
}

// Function Parts
returns = {
	indent ~ ^"return" ~ end_dec
		~ indent{2} ~ type_name ~ NEWLINE+
}

argument = {
	indent{2} ~ argument_name ~ WHITE_SPACE+ ~ type_name
	~ (WHITE_SPACE+ ~ "=" ~ WHITE_SPACE+ ~ default_value)?
	~ NEWLINE+
}

accept = {
	indent ~ ^"accept" ~ end_dec
		~ argument*
}

declare = {
	indent ~ ^"declare" ~ end_dec
		~ argument*
}

begin = {
	indent ~ ^"begin" ~ end_dec
		~ (indent{2} ~ sql ~ NEWLINE+)*
}

sql = @{ (!NEWLINE ~ ANY)* }
default_value = @{ (!NEWLINE ~ ANY)* }

end = {
	indent ~ "end" ~ WHITE_SPACE+ ~ language_name
	~ WHITE_SPACE+ ~ function_stability ~ (WHITE_SPACE+ ~ function_security)?
	~ NEWLINE+
}

// View Rule
view = {
	^"view" ~ WHITE_SPACE+ ~ (schema_name ~ ".")? ~ view_name
	~ (WHITE_SPACE* ~ "(" ~ column_name ~ (WHITE_SPACE*  ~ "," ~ WHITE_SPACE* ~ column_name) ~ ")")?
	~ end_dec
	~ view_body
}
view_body = {
	(indent ~ sql ~ NEWLINE+)*
}


// Misc utility rules
// A lot of these are just aliases to make our AST clearer
schema_name = @{ word }
table_name = @{ word }
interface_name = @{ word }
column_name = @{ word }
role_name = @{ word }
trigger_name = @{ word }
function_name = @{ word }
argument_name = @{ word }
language_name = @{ word }
view_name = @{ word }
role_option = @{ word }
/// SQL types
// Types come in the format of [schema.]type[(number[, number])]
type_name = {
    (schema_name ~ ".")?
    ~ type_name_word
    ~ ("("
        ~ WHITE_SPACE* ~ type_name_arg
        ~ (WHITE_SPACE* ~ "," ~ WHITE_SPACE* ~ type_name_arg ~ WHITE_SPACE*)?
        ~ ")"
    )?
}
type_name_word = @{ word }
type_name_arg = @{ ASCII_DIGIT+ }
/// An sql-safe word
word = @{ !ASCII_DIGIT ~ char+ }
/// The end of a declaration, i.e. "require:", or "table name   :  "
end_dec = _{ WHITE_SPACE* ~ ":" ~ " "* ~ NEWLINE* }
/// SQL-safe name chars
char = { ASCII_ALPHANUMERIC | "_" }
/// An indent is either two spaces or a tab character
indent = _{ "  " | "\t" }

privilege = {
	  ^"select"
	| ^"insert"
	| ^"update"
	| ^"delete"
	| ^"truncate"
	| ^"references"
	| ^"trigger"
	| ^"create"
	| ^"connect"
	| ^"temporary"
	| ^"execute"
	| ^"usage"
	| ^"set"
	| ^"alter system"
	| ^"all"
}

trigger_when = {
	  ^"before"
	| ^"after"
}

trigger_interface = { ^"interface" }

trigger_event = {
	  ^"insert"
	| ^"update"
	| ^"delete"
}

function_stability = {
	  ^"immutable"
	| ^"stable"
	| ^"volatile"
}

function_security = { ^"security definer" }

/// Comments begin with a # symbol and continue to the end of the line.
/// They can appear anywhere in the code.
COMMENT = _{ WHITE_SPACE* ~ "#" ~ (!NEWLINE ~ ANY)* }
